{"ast":null,"code":"var _jsxFileName = \"/Users/neeraj/Desktop/standard_alpha/client/src/components/graphs/RiskProfile.js\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport HighchartsReact from \"highcharts-react-official\"; // Import Highcharts\n\nimport Highcharts from \"highcharts/highcharts.src.js\"; // Import Action creator and dispatch\n\nimport { getGraphData } from \"../../actions/graphsAction\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nclass RiskProfile extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentData: [],\n      expiryData: [],\n      pricesData: [],\n      x: \"\",\n      chartOptions: {\n        series: [{\n          name: \"Now\",\n          data: []\n        }, {\n          name: \"Expiry\",\n          color: \"green\",\n          data: []\n        }],\n        chart: {\n          backgroundColor: \"#1f2531\",\n          type: \"line\"\n        },\n        credits: {\n          enabled: false\n        },\n        title: {\n          text: \"Risk Profile Graph\",\n          align: \"center\",\n          fontFamily: \"Lucida Grande\",\n          x: 70,\n          style: {\n            color: \"#fff\"\n          }\n        },\n        yAxis: {\n          title: {\n            enabled: true,\n            text: \"Prices\",\n            style: {\n              fontWeight: \"normal\",\n              color: \"#fff\"\n            }\n          },\n          labels: {\n            style: {\n              color: \"#fff\"\n            }\n          }\n        },\n        xAxis: {\n          labels: {\n            style: {\n              color: \"#fff\"\n            }\n          },\n          categories: []\n        }\n      }\n    };\n\n    this.afterChartCreated = chart => {\n      this.internalChart = chart;\n      this.forceUpdate();\n    };\n  }\n\n  componentDidUpdate() {\n    // this.internalChart.getMargins(); // redraw\n    this.internalChart.reflow();\n    this.setState({\n      currentData: this.props.graphValues.graphValues.current_payoff,\n      expiryData: this.props.graphValues.graphValues.expiry_payoff,\n      pricesData: this.props.graphValues.graphValues.underlying_price // chartOptions.series[1].data:\n\n    }); // console.log(this.state.graphData);\n    // console.log(this.props.graphValues.graphValues);\n    // Updating Now Data Frame\n\n    if (typeof this.state.currentData !== \"undefined\" && this.state.currentData.length > 0) {\n      this.state.currentData.map(data => {\n        this.state.chartOptions.series[0].data.push(data);\n      }); // this.state.chartOptions.series[1].data.push(this.props.graphValues.graphValues.expiry_payoff);\n    } // Updating Expiry Data Frame\n\n\n    if (typeof this.state.expiryData !== \"undefined\" && this.state.expiryData.length > 0) {\n      this.state.expiryData.map(data => {\n        this.state.chartOptions.series[1].data.push(data);\n      }); // this.state.chartOptions.series[1].data.push(this.props.graphValues.graphValues.expiry_payoff);\n    } // Updating Prices Data Frame\n\n\n    if (typeof this.state.pricesData !== \"undefined\" && this.state.pricesData.length > 0) {\n      this.state.pricesData.map(data => {\n        this.state.chartOptions.xAxis.categories.push(data);\n      }); // this.state.chartOptions.series[1].data.push(this.props.graphValues.graphValues.expiry_payoff);\n      // }\n      // if (this.props){\n      //   let nowCopy = JSON.parse(JSON.stringify(this.state.chartOptions))\n      //   nowCopy.xAxis.categories = this.props.graphValues.graphValues.current_payoff\n      //   this.setState({\n      //     chartOptions: nowCopy\n      //   })\n      // console.log('NOW', nowCopy)\n    }\n\n    console.log(this.state);\n  }\n\n  componentDidMount() {// this.state.chartOptions.series[1].data.push(this.props.graphValues.graphValues.expiry_payoff);\n    // this.forceUpdate()\n  }\n\n  render() {\n    const chart = this.internalChart,\n          customLabels = [];\n    const chartOptions = {\n      series: [{\n        name: \"Now\",\n        data: this.state.currentData\n      }, {\n        name: \"Expiry\",\n        color: \"green\",\n        data: this.state.expiryData\n      }],\n      chart: {\n        backgroundColor: \"#1f2531\",\n        type: \"line\"\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: \"Risk Profile Graph\",\n        align: \"center\",\n        fontFamily: \"Lucida Grande\",\n        x: 70,\n        style: {\n          color: \"#fff\"\n        }\n      },\n      yAxis: {\n        title: {\n          enabled: true,\n          text: \"Prices\",\n          style: {\n            fontWeight: \"normal\",\n            color: \"#fff\"\n          }\n        },\n        labels: {\n          style: {\n            color: \"#fff\"\n          }\n        }\n      },\n      xAxis: {\n        labels: {\n          style: {\n            color: \"#fff\"\n          }\n        },\n        categories: this.state.pricesData\n      }\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: chartOptions,\n      callback: this.afterChartCreated,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), customLabels);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  graphValues: state.graphValues\n});\n\nexport default connect(mapStateToProps, {\n  getGraphData\n})(withRouter(RiskProfile));","map":{"version":3,"sources":["/Users/neeraj/Desktop/standard_alpha/client/src/components/graphs/RiskProfile.js"],"names":["React","render","HighchartsReact","Highcharts","getGraphData","connect","withRouter","RiskProfile","PureComponent","state","currentData","expiryData","pricesData","x","chartOptions","series","name","data","color","chart","backgroundColor","type","credits","enabled","title","text","align","fontFamily","style","yAxis","fontWeight","labels","xAxis","categories","afterChartCreated","internalChart","forceUpdate","componentDidUpdate","reflow","setState","props","graphValues","current_payoff","expiry_payoff","underlying_price","length","map","push","console","log","componentDidMount","customLabels","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport HighchartsReact from \"highcharts-react-official\";\n// Import Highcharts\nimport Highcharts from \"highcharts/highcharts.src.js\";\n// Import Action creator and dispatch\nimport { getGraphData } from \"../../actions/graphsAction\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\n\nclass RiskProfile extends React.PureComponent {\n  state = {\n    currentData: [],\n    expiryData: [],\n    pricesData: [],\n    x: \"\",\n    chartOptions: {\n      series: [\n        {\n          name: \"Now\",\n          data: []\n        },\n        {\n          name: \"Expiry\",\n          color: \"green\",\n          data: []\n        }\n      ],\n      chart: {\n        backgroundColor: \"#1f2531\",\n        type: \"line\"\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: \"Risk Profile Graph\",\n        align: \"center\",\n        fontFamily: \"Lucida Grande\",\n        x: 70,\n        style: {\n          color: \"#fff\"\n        }\n      },\n      yAxis: {\n        title: {\n          enabled: true,\n          text: \"Prices\",\n          style: {\n            fontWeight: \"normal\",\n            color: \"#fff\"\n          }\n        },\n        labels: {\n          style: {\n            color: \"#fff\"\n          }\n        }\n      },\n      xAxis: {\n        labels: {\n          style: {\n            color: \"#fff\"\n          }\n        },\n\n        categories: []\n      }\n    }\n  };\n\n  afterChartCreated = chart => {\n    this.internalChart = chart;\n    this.forceUpdate();\n  };\n\n  componentDidUpdate() {\n    // this.internalChart.getMargins(); // redraw\n    this.internalChart.reflow();\n\n    this.setState({\n      currentData: this.props.graphValues.graphValues.current_payoff,\n      expiryData: this.props.graphValues.graphValues.expiry_payoff,\n      pricesData: this.props.graphValues.graphValues.underlying_price\n      // chartOptions.series[1].data:\n    });\n\n    // console.log(this.state.graphData);\n    // console.log(this.props.graphValues.graphValues);\n\n    // Updating Now Data Frame\n    if (\n      typeof this.state.currentData !== \"undefined\" &&\n      this.state.currentData.length > 0\n    ) {\n      this.state.currentData.map(data => {\n        this.state.chartOptions.series[0].data.push(data);\n      });\n      // this.state.chartOptions.series[1].data.push(this.props.graphValues.graphValues.expiry_payoff);\n    }\n\n    // Updating Expiry Data Frame\n    if (\n      typeof this.state.expiryData !== \"undefined\" &&\n      this.state.expiryData.length > 0\n    ) {\n      this.state.expiryData.map(data => {\n        this.state.chartOptions.series[1].data.push(data);\n      });\n      // this.state.chartOptions.series[1].data.push(this.props.graphValues.graphValues.expiry_payoff);\n    }\n\n    // Updating Prices Data Frame\n    if (\n      typeof this.state.pricesData !== \"undefined\" &&\n      this.state.pricesData.length > 0\n    ) {\n      this.state.pricesData.map(data => {\n        this.state.chartOptions.xAxis.categories.push(data);\n      });\n\n      // this.state.chartOptions.series[1].data.push(this.props.graphValues.graphValues.expiry_payoff);\n      // }\n      // if (this.props){\n      //   let nowCopy = JSON.parse(JSON.stringify(this.state.chartOptions))\n      //   nowCopy.xAxis.categories = this.props.graphValues.graphValues.current_payoff\n      //   this.setState({\n      //     chartOptions: nowCopy\n      //   })\n      // console.log('NOW', nowCopy)\n    }\n    console.log(this.state);\n  }\n  componentDidMount() {\n    // this.state.chartOptions.series[1].data.push(this.props.graphValues.graphValues.expiry_payoff);\n    // this.forceUpdate()\n  }\n\n  render() {\n    const chart = this.internalChart,\n      customLabels = [];\n\n    const chartOptions = {\n      series: [\n        {\n          name: \"Now\",\n          data: this.state.currentData\n        },\n        {\n          name: \"Expiry\",\n          color: \"green\",\n          data: this.state.expiryData\n        }\n      ],\n      chart: {\n        backgroundColor: \"#1f2531\",\n        type: \"line\"\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: \"Risk Profile Graph\",\n        align: \"center\",\n        fontFamily: \"Lucida Grande\",\n        x: 70,\n        style: {\n          color: \"#fff\"\n        }\n      },\n      yAxis: {\n        title: {\n          enabled: true,\n          text: \"Prices\",\n          style: {\n            fontWeight: \"normal\",\n            color: \"#fff\"\n          }\n        },\n        labels: {\n          style: {\n            color: \"#fff\"\n          }\n        }\n      },\n      xAxis: {\n        labels: {\n          style: {\n            color: \"#fff\"\n          }\n        },\n\n        categories: this.state.pricesData\n      }\n    };\n\n    return (\n      <div>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options={chartOptions}\n          callback={this.afterChartCreated}\n        />\n        {customLabels}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  graphValues: state.graphValues\n});\n\nexport default connect(\n  mapStateToProps,\n  { getGraphData }\n)(withRouter(RiskProfile));\n"]},"metadata":{},"sourceType":"module"}